create table USERS
(
    USER_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_NAME VARCHAR(100),
    LOGIN     VARCHAR(100)  not null unique,
    EMAIL     VARCHAR(200) not null unique,
    BIRTHDAY date
);

--create unique index USERS_LOGIN_UNQ
--    on USERS(LOGIN);

--create unique index USERS_EMAIL_UNQ
--    on USERS(EMAIL);

create table MPA
(
    MPA_ID INTEGER PRIMARY KEY ,
    MPA_NAME VARCHAR(50)
);
create table FILMS
(
    FILM_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    FILM_NAME VARCHAR(100) ,
    DESCRIPTION VARCHAR(250) ,
    RELEASE DATE,
    DURATION INTEGER,
    RATE INTEGER,
    MPA_ID INTEGER,
    constraint MPA_ID
        foreign key (MPA_ID) REFERENCES MPA
);

create table GENRES
(
    GENRE_ID INTEGER PRIMARY KEY ,
    GENRE_NAME VARCHAR(50)
);

create table FILMS_GENRES
(
    FILM_ID BIGINT,
    GENRE_ID INTEGER,
    constraint GENRE_ID
        foreign key (GENRE_ID) REFERENCES GENRES,
    constraint FILM_ID
            foreign key (FILM_ID) REFERENCES FILMS
);

-- create table FILMS_MPA
-- (
--     FILM_ID BIGINT,
--     MPA_ID INTEGER,
--     constraint MPA_ID
--         foreign key (MPA_ID) REFERENCES MPA,
--     constraint FILM_ID_MPA
--             foreign key (FILM_ID) REFERENCES FILMS
-- );

create table LIKES
(
    FILM_ID BIGINT,
    USER_ID BIGINT,
    constraint FILM_ID_LIKE
        foreign key (FILM_ID) REFERENCES FILMS,
    constraint USER_ID
            foreign key (USER_ID) REFERENCES USERS
);
create table FRIENDS
(
    USER_ID BIGINT,
    FRIEND_ID BIGINT,
    IS_CONFIRMED BOOLEAN default false,
    constraint USER_ID_FR
        foreign key (USER_ID) REFERENCES USERS,
    constraint FRIEND_ID_FR
        foreign key (FRIEND_ID) REFERENCES USERS
);